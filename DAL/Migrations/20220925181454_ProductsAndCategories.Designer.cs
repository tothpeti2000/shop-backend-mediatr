// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20220925181454_ProductsAndCategories")]
    partial class ProductsAndCategories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("65960d1f-7d33-4ff0-9cf7-7f47c666b6b5"),
                            Name = "Toy"
                        },
                        new
                        {
                            Id = new Guid("0e86b7fb-0823-482c-b931-bbe8fbdf6731"),
                            Name = "Play house"
                        },
                        new
                        {
                            Id = new Guid("29c58271-9b2f-401d-9dcc-7623c77200c6"),
                            Name = "Baby toy",
                            ParentCategoryId = new Guid("65960d1f-7d33-4ff0-9cf7-7f47c666b6b5")
                        },
                        new
                        {
                            Id = new Guid("12297e15-f812-4d32-9a78-457441613538"),
                            Name = "Construction toy",
                            ParentCategoryId = new Guid("65960d1f-7d33-4ff0-9cf7-7f47c666b6b5")
                        },
                        new
                        {
                            Id = new Guid("ec94deeb-aa71-4e88-ad6e-01144e872dbc"),
                            Name = "Wooden toy",
                            ParentCategoryId = new Guid("65960d1f-7d33-4ff0-9cf7-7f47c666b6b5")
                        },
                        new
                        {
                            Id = new Guid("89f5e936-d70a-422f-abd4-941da618ecd4"),
                            Name = "Plush figure",
                            ParentCategoryId = new Guid("65960d1f-7d33-4ff0-9cf7-7f47c666b6b5")
                        },
                        new
                        {
                            Id = new Guid("53adfbff-f3b2-42b4-8295-19012a5a4291"),
                            Name = "Bicycles",
                            ParentCategoryId = new Guid("65960d1f-7d33-4ff0-9cf7-7f47c666b6b5")
                        },
                        new
                        {
                            Id = new Guid("88821c87-272e-4d69-87c2-57913442b120"),
                            Name = "Months 0-6",
                            ParentCategoryId = new Guid("29c58271-9b2f-401d-9dcc-7623c77200c6")
                        },
                        new
                        {
                            Id = new Guid("b3413e39-36ec-40dc-bfc8-a127e29b358a"),
                            Name = "Months 6-18",
                            ParentCategoryId = new Guid("29c58271-9b2f-401d-9dcc-7623c77200c6")
                        },
                        new
                        {
                            Id = new Guid("14b9f3a3-9ecf-49a1-abe0-8b32e8deb102"),
                            Name = "Months 18-24",
                            ParentCategoryId = new Guid("29c58271-9b2f-401d-9dcc-7623c77200c6")
                        },
                        new
                        {
                            Id = new Guid("b3729a7d-5626-48f7-b435-077f2761551e"),
                            Name = "DUPLO",
                            ParentCategoryId = new Guid("12297e15-f812-4d32-9a78-457441613538")
                        },
                        new
                        {
                            Id = new Guid("f57325e4-de39-4d1d-84e9-3b5920bc11b1"),
                            Name = "LEGO",
                            ParentCategoryId = new Guid("12297e15-f812-4d32-9a78-457441613538")
                        },
                        new
                        {
                            Id = new Guid("b2e9416d-807f-4a9c-8096-5659f0a49ea1"),
                            Name = "Building items",
                            ParentCategoryId = new Guid("12297e15-f812-4d32-9a78-457441613538")
                        },
                        new
                        {
                            Id = new Guid("73a8d0c6-9fee-471d-9953-94b61169ae45"),
                            Name = "Building blocks",
                            ParentCategoryId = new Guid("ec94deeb-aa71-4e88-ad6e-01144e872dbc")
                        },
                        new
                        {
                            Id = new Guid("018e4bce-43d1-44d2-a08d-6cb428464847"),
                            Name = "Toys for skill development",
                            ParentCategoryId = new Guid("ec94deeb-aa71-4e88-ad6e-01144e872dbc")
                        },
                        new
                        {
                            Id = new Guid("388d892b-7661-4d72-94d4-7186a3e9157d"),
                            Name = "Logic toys",
                            ParentCategoryId = new Guid("ec94deeb-aa71-4e88-ad6e-01144e872dbc")
                        },
                        new
                        {
                            Id = new Guid("4d71052e-5ffb-4788-835f-d4d0294e2228"),
                            Name = "Craftwork toys",
                            ParentCategoryId = new Guid("ec94deeb-aa71-4e88-ad6e-01144e872dbc")
                        },
                        new
                        {
                            Id = new Guid("627bfd65-61d4-4bd5-99e5-f09e57fd9522"),
                            Name = "Baby taxis",
                            ParentCategoryId = new Guid("53adfbff-f3b2-42b4-8295-19012a5a4291")
                        },
                        new
                        {
                            Id = new Guid("f829b33f-f770-446c-87ce-29aaee86ef02"),
                            Name = "Motors",
                            ParentCategoryId = new Guid("53adfbff-f3b2-42b4-8295-19012a5a4291")
                        },
                        new
                        {
                            Id = new Guid("38168820-cb65-4f7c-84a9-52c024b3a9a1"),
                            Name = "Tricycle",
                            ParentCategoryId = new Guid("53adfbff-f3b2-42b4-8295-19012a5a4291")
                        });
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("005e4dcd-4fac-4f26-8292-1d8acabd8550"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("88821c87-272e-4d69-87c2-57913442b120"),
                            Description = "Description",
                            Name = "Activity playgim",
                            Price = 7488.0,
                            Stock = 21
                        },
                        new
                        {
                            Id = new Guid("6d31d511-cd30-44d5-8281-73ccb0782642"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("88821c87-272e-4d69-87c2-57913442b120"),
                            Description = "Description",
                            Name = "Colorful baby book",
                            Price = 1738.0,
                            Stock = 58
                        },
                        new
                        {
                            Id = new Guid("1e8497e8-2025-4204-bb5d-bd0d6ad13d16"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("b3413e39-36ec-40dc-bfc8-a127e29b358a"),
                            Description = "Description",
                            Name = "Baby telephone",
                            Price = 3725.0,
                            Stock = 18
                        },
                        new
                        {
                            Id = new Guid("c33b8fce-c0f4-47cf-8b07-44166b9d2722"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("14b9f3a3-9ecf-49a1-abe0-8b32e8deb102"),
                            Description = "Description",
                            Name = "Fisher Price hammer toy",
                            Price = 8356.0,
                            Stock = 58
                        },
                        new
                        {
                            Id = new Guid("741a0b9f-62f2-4b36-95c1-9a3dab57f9d2"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("73a8d0c6-9fee-471d-9953-94b61169ae45"),
                            Description = "Description",
                            Name = "Mega Bloks 24 pcs",
                            Price = 4325.0,
                            Stock = 47
                        },
                        new
                        {
                            Id = new Guid("3733c8bd-bb40-440f-839c-d4e06049e160"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("73a8d0c6-9fee-471d-9953-94b61169ae45"),
                            Description = "Description",
                            Name = "Maxi Blocks 56 pcs",
                            Price = 1854.0,
                            Stock = 36
                        },
                        new
                        {
                            Id = new Guid("7c9078f9-bb42-4a2e-aac9-c4a28c01f1fa"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("73a8d0c6-9fee-471d-9953-94b61169ae45"),
                            Description = "Description",
                            Name = "Building Blocks 80 pcs",
                            Price = 4362.0,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("7eacf084-e476-4677-a47f-ea648c907db0"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("b2e9416d-807f-4a9c-8096-5659f0a49ea1"),
                            Description = "Description for LEGO City Harbour",
                            Name = "Lego City harbour",
                            Price = 27563.0,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("fbfbb1a9-3a15-4236-a7a0-02901ea3e9ff"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("b3729a7d-5626-48f7-b435-077f2761551e"),
                            Description = "Description for LEGO Duplo Excavator",
                            Name = "Lego Duplo Excavator",
                            Price = 6399.0,
                            Stock = 26
                        },
                        new
                        {
                            Id = new Guid("6256d78d-1a97-41e5-a92b-512b22e76feb"),
                            AverageRating = 5.0,
                            CategoryId = new Guid("0e86b7fb-0823-482c-b931-bbe8fbdf6731"),
                            Description = "Description",
                            Name = "Child supervision for 1 hour",
                            Price = 800.0,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
